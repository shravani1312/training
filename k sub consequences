import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;



class Result {

    /*
     * Complete the 'kSub' function below.
     *
     * The function is expected to return a LONG_INTEGER.
     * The function accepts following parameters:
     *  1. INTEGER k
     *  2. INTEGER_ARRAY nums
     */

    public static long kSub(int k, int[] arr) {

    // Write your code here
      int size = arr.length;
                // list is used to print the pairs
                Map<Integer, List<Integer>> hashMap = new HashMap<Integer, List<Integer>>();
                
                int currentSum = 0;
                for (int index = 0; index < size; index++) {
                        currentSum += arr[index];
                        List<Integer> list = hashMap.get(currentSum % k);
                        if (null != list) {
                                list.add(index);

                        } else {
                                list = new ArrayList<Integer>();
                                list.add(index);
                        }
                        hashMap.put(currentSum % k, list);
                }
                
                int noOfSubArray = 0;
                for(Map.Entry<Integer, List<Integer>> entry : hashMap.entrySet()) {
                        Integer key = entry.getKey();
                        Integer listSize = entry.getValue().size();
                        if(key == 0) {
                                noOfSubArray += (listSize*(listSize+1))/2;
                        } else {
                                noOfSubArray += (listSize*(listSize-1))/2;
                        }
                }
               return noOfSubArray;           
    }

}

public class Solution {
